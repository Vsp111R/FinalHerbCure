# from flask import Flask, request, jsonify, send_file
# from flask_cors import CORS
# import json
# import os
# import datetime
# import textwrap
# from paddleocr import PaddleOCR
# from fpdf import FPDF

# app = Flask(__name__)
# CORS(app)

# CORS(app, origins=["http://localhost:5174"])

# # Load ingredient uses from JSON
# with open("data.json", "r", encoding="utf-8") as file:
#     ingredient_uses = json.load(file)

# # Initialize PaddleOCR
# ocr = PaddleOCR(use_angle_cls=True, lang="en", use_gpu=False)


# @app.route("/extract", methods=["POST"])
# def extract_text():
#     if "image" not in request.files:
#         return jsonify({"error": "No image uploaded"}), 400

#     image = request.files["image"]
#     image_path = "uploaded_image.jpg"
#     image.save(image_path)

#     # Run OCR
#     result = ocr.ocr(image_path, cls=True)
#     full_text = [word[1][0].strip().lower() for line in result for word in line]
#     full_text_str = " ".join(full_text)

#     # Stop words filtering
#     stop_words = {"dose", "indications", "directions", "usage", "how to use"}
#     for stop_word in stop_words:
#         if stop_word in full_text_str:
#             full_text_str = full_text_str.split(stop_word)[0].strip()
#             break

#     # Extract ingredients
#     common_ingredient_names = set(ingredient_uses.keys())
#     found_ingredients = {
#         name for name in common_ingredient_names if name in full_text_str
#     }

#     # Check for preservatives
#     preservative_keywords = ["preservative", "excipients", "additive", "stabilizer"]
#     contains_preservatives = any(
#         keyword in full_text_str for keyword in preservative_keywords
#     )

#     # Get current date and time
#     now = datetime.datetime.now()
#     date_time = now.strftime(
#         "%A, %d %B %Y | %I:%M %p"
#     )  # Example: Monday, 12 February 2024 | 10:30 AM

#     # Generate PDF report
#     pdf = FPDF()
#     pdf.set_auto_page_break(auto=True, margin=15)
#     pdf.add_page()

#     # Use built-in font (Arial, Times, or Courier)
#     pdf.set_font("Arial", "B", 16)
#     pdf.cell(200, 10, "HerbCure - Extracted Ingredients Report", ln=True, align="C")

#     pdf.set_font("Arial", "", 12)
#     pdf.cell(200, 8, f" {date_time}", ln=True, align="C")

#     pdf.ln(10)

#     # ✅ **Wrap Extracted Text**
#     pdf.set_font("Arial", "", 12)
#     wrapped_text = textwrap.fill(f"Extracted Text:\n{full_text_str}", width=90)
#     pdf.multi_cell(190, 8, wrapped_text)

#     pdf.ln(10)
#     pdf.set_font("Arial", "B", 14)
#     pdf.cell(200, 10, "Detected Ingredients & Their Uses:", ln=True)

#     pdf.set_font("Arial", "", 12)

#     for ingredient in found_ingredients:
#         ingredient_text = f"- {ingredient.capitalize()}: {ingredient_uses[ingredient]}"
#         pdf.multi_cell(190, 8, ingredient_text, align="L")
#         pdf.ln(3)

#     pdf.ln(10)

#     if contains_preservatives:
#         pdf.set_text_color(255, 0, 0)
#         pdf.cell(0, 10, " Warning: This product contains preservatives!", ln=True)
#         pdf.set_font("Arial", "", 11)
#         pdf.multi_cell(
#             190,
#             8,
#             "Note: Some ingredients detected in this product contains preservatives as per "
#             "the guidelines of the Ministry of AYUSH (They have mentioned). Please refer to official sources "
#             "for more details.",
#             align="L",
#         )
#     else:
#         pdf.set_text_color(0, 128, 0)
#         pdf.cell(
#             0,
#             10,
#             "As per the provided image of medicine no preservatives detected.",
#             ln=True,
#         )
#         pdf.set_font("Arial", "", 11)
#         pdf.multi_cell(
#             190, 8, "Note: Consume after prescription from a doctor.", align="L"
#         )

#     pdf.set_text_color(0, 0, 0)
#     pdf.ln(10)
#     pdf.set_font("Arial", "I", 12)
#     pdf.cell(200, 10, "Report Generated by HerbCure", ln=True, align="C")

#     # Save PDF to Downloads folder
#     downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
#     pdf_filename = os.path.join(downloads_path, "Extracted_Ingredients_Report.pdf")
#     pdf.output(pdf_filename, "F")

#     return send_file(pdf_filename, as_attachment=True)


# if __name__ == "__main__":
#     app.run(debug=True, port=5000)



from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import json
import os
import datetime
import textwrap
import base64
from io import BytesIO
from paddleocr import PaddleOCR
from fpdf import FPDF
from PIL import Image

app = Flask(__name__)
CORS(app)

CORS(app, origins=["http://localhost:5174"])

# Load ingredient uses from JSON
with open("data.json", "r", encoding="utf-8") as file:
    ingredient_uses = json.load(file)

# Initialize PaddleOCR
ocr = PaddleOCR(use_angle_cls=True, lang="en", use_gpu=False)

@app.route("/extract", methods=["POST"])
def extract_text():
    image_path = "uploaded_image.jpg"

    # ✅ Check if an image file was uploaded
    if "image" in request.files:
        image = request.files["image"]
        image.save(image_path)
    
    # ✅ Check if a Base64 image (captured from the camera) is sent
    elif "captured_image" in request.json:
        try:
            captured_image_data = request.json["captured_image"]
            image_data = base64.b64decode(captured_image_data.split(",")[1])  # Extract Base64 data
            image = Image.open(BytesIO(image_data))
            image.save(image_path, "JPEG")  # Save as JPG file
        except Exception as e:
            return jsonify({"error": "Invalid image data"}), 400
    else:
        return jsonify({"error": "No image provided"}), 400

    # Run OCR
    result = ocr.ocr(image_path, cls=True)
    full_text = [word[1][0].strip().lower() for line in result for word in line]
    full_text_str = " ".join(full_text)

    # Stop words filtering
    stop_words = {"dose", "indications", "directions", "usage", "how to use"}
    for stop_word in stop_words:
        if stop_word in full_text_str:
            full_text_str = full_text_str.split(stop_word)[0].strip()
            break

    # Extract ingredients
    common_ingredient_names = set(ingredient_uses.keys())
    found_ingredients = {
        name for name in common_ingredient_names if name in full_text_str
    }

    # Check for preservatives
    preservative_keywords = ["preservative", "excipients", "additive", "stabilizer"]
    contains_preservatives = any(
        keyword in full_text_str for keyword in preservative_keywords
    )

    # Get current date and time
    now = datetime.datetime.now()
    date_time = now.strftime("%A, %d %B %Y | %I:%M %p")

    # Generate PDF report
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()

    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, "HerbCure - Extracted Ingredients Report", ln=True, align="C")

    pdf.set_font("Arial", "", 12)
    pdf.cell(200, 8, f" {date_time}", ln=True, align="C")

    pdf.ln(10)

    # ✅ Wrap Extracted Text
    pdf.set_font("Arial", "", 12)
    wrapped_text = textwrap.fill(f"Extracted Text:\n{full_text_str}", width=90)
    pdf.multi_cell(190, 8, wrapped_text)

    pdf.ln(10)
    pdf.set_font("Arial", "B", 14)
    pdf.cell(200, 10, "Detected Ingredients & Their Uses:", ln=True)

    pdf.set_font("Arial", "", 12)

    for ingredient in found_ingredients:
        ingredient_text = f"- {ingredient.capitalize()}: {ingredient_uses[ingredient]}"
        pdf.multi_cell(190, 8, ingredient_text, align="L")
        pdf.ln(3)

    pdf.ln(10)

    if contains_preservatives:
        pdf.set_text_color(255, 0, 0)
        pdf.cell(0, 10, " Warning: This product contains preservatives!", ln=True)
        pdf.set_font("Arial", "", 11)
        pdf.multi_cell(
            190,
            8,
            "Note: Some ingredients detected in this product contain preservatives as per "
            "the guidelines of the Ministry of AYUSH. Please refer to official sources for more details.",
            align="L",
        )
    else:
        pdf.set_text_color(0, 128, 0)
        pdf.cell(
            0,
            10,
            "As per the provided image of medicine, no preservatives detected.",
            ln=True,
        )
        pdf.set_font("Arial", "", 11)
        pdf.multi_cell(
            190, 8, "Note: Consume after prescription from a doctor.", align="L"
        )

    pdf.set_text_color(0, 0, 0)
    pdf.ln(10)
    pdf.set_font("Arial", "I", 12)
    pdf.cell(200, 10, "Report Generated by HerbCure", ln=True, align="C")

    # Save PDF to Downloads folder
    downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
    pdf_filename = os.path.join(downloads_path, "Extracted_Ingredients_Report.pdf")
    pdf.output(pdf_filename, "F")

    return send_file(pdf_filename, as_attachment=True)

if __name__ == "__main__":
    app.run(debug=True, port=5000)
