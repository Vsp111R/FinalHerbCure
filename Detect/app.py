# # from flask import Flask, request, jsonify, send_file
# # from flask_cors import CORS
# # import json
# # import os
# # import datetime
# # import textwrap
# # import base64
# # from io import BytesIO
# # from paddleocr import PaddleOCR
# # from fpdf import FPDF
# # from PIL import Image

# # app = Flask(__name__)
# # CORS(app)

# # CORS(app, origins=["http://localhost:5174"])

# # # Load ingredient uses from JSON
# # with open("data.json", "r", encoding="utf-8") as file:
# #     ingredient_uses = json.load(file)

# # # Initialize PaddleOCR
# # ocr = PaddleOCR(use_angle_cls=True, lang="en", use_gpu=False)

# # @app.route("/extract", methods=["POST"])
# # def extract_text():
# #     image_path = "uploaded_image.jpg"

# #     # ✅ Check if an image file was uploaded
# #     if "image" in request.files:
# #         image = request.files["image"]
# #         image.save(image_path)
    
# #     # ✅ Check if a Base64 image (captured from the camera) is sent
# #     elif "captured_image" in request.json:
# #         try:
# #             captured_image_data = request.json["captured_image"]
# #             image_data = base64.b64decode(captured_image_data.split(",")[1])  # Extract Base64 data
# #             image = Image.open(BytesIO(image_data))
# #             image.save(image_path, "JPEG")  # Save as JPG file
# #         except Exception as e:
# #             return jsonify({"error": "Invalid image data"}), 400
# #     else:
# #         return jsonify({"error": "No image provided"}), 400

# #     # Run OCR
# #     result = ocr.ocr(image_path, cls=True)
# #     full_text = [word[1][0].strip().lower() for line in result for word in line]
# #     full_text_str = " ".join(full_text)

# #     # Stop words filtering
# #     stop_words = {"dose", "indications", "directions", "usage", "how to use"}
# #     for stop_word in stop_words:
# #         if stop_word in full_text_str:
# #             full_text_str = full_text_str.split(stop_word)[0].strip()
# #             break

# #     # Extract ingredients
# #     common_ingredient_names = set(ingredient_uses.keys())
# #     found_ingredients = {
# #         name for name in common_ingredient_names if name in full_text_str
# #     }

# #     # Check for preservatives
# #     preservative_keywords = ["preservative", "excipients", "additive", "stabilizer"]
# #     contains_preservatives = any(
# #         keyword in full_text_str for keyword in preservative_keywords
# #     )

# #     # Get current date and time
# #     now = datetime.datetime.now()
# #     date_time = now.strftime("%A, %d %B %Y | %I:%M %p")

# #     # Generate PDF report
# #     pdf = FPDF()
# #     pdf.set_auto_page_break(auto=True, margin=15)
# #     pdf.add_page()

# #     pdf.set_font("Arial", "B", 16)
# #     pdf.cell(200, 10, "HerbCure - Extracted Ingredients Report", ln=True, align="C")

# #     pdf.set_font("Arial", "", 12)
# #     pdf.cell(200, 8, f" {date_time}", ln=True, align="C")

# #     pdf.ln(10)

# #     # ✅ Wrap Extracted Text
# #     pdf.set_font("Arial", "", 12)
# #     wrapped_text = textwrap.fill(f"Extracted Text:\n{full_text_str}", width=90)
# #     pdf.multi_cell(190, 8, wrapped_text)

# #     pdf.ln(10)
# #     pdf.set_font("Arial", "B", 14)
# #     pdf.cell(200, 10, "Detected Ingredients & Their Uses:", ln=True)

# #     pdf.set_font("Arial", "", 12)

# #     for ingredient in found_ingredients:
# #         ingredient_text = f"- {ingredient.capitalize()}: {ingredient_uses[ingredient]}"
# #         pdf.multi_cell(190, 8, ingredient_text, align="L")
# #         pdf.ln(3)

# #     pdf.ln(10)

# #     if contains_preservatives:
# #         pdf.set_text_color(255, 0, 0)
# #         pdf.cell(0, 10, " Warning: This product contains preservatives!", ln=True)
# #         pdf.set_font("Arial", "", 11)
# #         pdf.multi_cell(
# #             190,
# #             8,
# #             "Note: Some ingredients detected in this product contain preservatives as per "
# #             "the guidelines of the Ministry of AYUSH. Please refer to official sources for more details.",
# #             align="L",
# #         )
# #     else:
# #         pdf.set_text_color(0, 128, 0)
# #         pdf.cell(
# #             0,
# #             10,
# #             "As per the provided image of medicine, no preservatives detected.",
# #             ln=True,
# #         )
# #         pdf.set_font("Arial", "", 11)
# #         pdf.multi_cell(
# #             190, 8, "Note: Consume after prescription from a doctor.", align="L"
# #         )

# #     pdf.set_text_color(0, 0, 0)
# #     pdf.ln(10)
# #     pdf.set_font("Arial", "I", 12)
# #     pdf.cell(200, 10, "Report Generated by HerbCure", ln=True, align="C")

# #     # Save PDF to Downloads folder
# #     downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
# #     pdf_filename = os.path.join(downloads_path, "Extracted_Ingredients_Report.pdf")
# #     pdf.output(pdf_filename, "F")

# #     return send_file(pdf_filename, as_attachment=True)

# # if __name__ == "__main__":
# #     app.run(debug=True, port=5000)



# from flask import Flask, request, jsonify, send_file
# from flask_cors import CORS
# import json
# import os
# import datetime
# import textwrap
# import base64
# from io import BytesIO
# from paddleocr import PaddleOCR
# from fpdf import FPDF
# from PIL import Image

# app = Flask(__name__)
# CORS(app)

# CORS(app, origins=["http://localhost:5173"])

# # Load ingredient uses from JSON
# with open("data.json", "r", encoding="utf-8") as file:
#     ingredient_uses = json.load(file)

# # Load alternate medicines from compare.json
# with open("compare.json", "r", encoding="utf-8") as file:
#     alternate_medicines = json.load(file)

# # Initialize PaddleOCR
# ocr = PaddleOCR(use_angle_cls=True, lang="en", use_gpu=False)

# @app.route("/extract", methods=["POST"])
# def extract_text():
#     image_path = "uploaded_image.jpg"

#     # ✅ Check if an image file was uploaded
#     if "image" in request.files:
#         image = request.files["image"]
#         image.save(image_path)
    
#     # ✅ Check if a Base64 image (captured from the camera) is sent
#     elif "captured_image" in request.json:
#         try:
#             captured_image_data = request.json["captured_image"]
#             image_data = base64.b64decode(captured_image_data.split(",")[1])  # Extract Base64 data
#             image = Image.open(BytesIO(image_data))
#             image.save(image_path, "JPEG")  # Save as JPG file
#         except Exception as e:
#             return jsonify({"error": "Invalid image data"}), 400
#     else:
#         return jsonify({"error": "No image provided"}), 400

#     # Run OCR
#     result = ocr.ocr(image_path, cls=True)
#     full_text = [word[1][0].strip().lower() for line in result for word in line]
#     full_text_str = " ".join(full_text)

#     # Stop words filtering
#     stop_words = {"dose", "indications", "directions", "usage", "how to use"}
#     for stop_word in stop_words:
#         if stop_word in full_text_str:
#             full_text_str = full_text_str.split(stop_word)[0].strip()
#             break

#     # Extract ingredients
#     common_ingredient_names = set(ingredient_uses.keys())
#     found_ingredients = {
#         name for name in common_ingredient_names if name in full_text_str
#     }

#     # Check for preservatives
#     preservative_keywords = ["preservative", "excipients", "additive", "stabilizer"]
#     contains_preservatives = any(
#         keyword in full_text_str for keyword in preservative_keywords
#     )

#     # Extract disease name from request
#     disease_name = request.json.get("disease", "").lower()

#     # Find alternate medicine
#     alternate_options = [
#         med for med in alternate_medicines if med["disease"].lower() == disease_name
#     ]

#     # Get current date and time
#     now = datetime.datetime.now()
#     date_time = now.strftime("%A, %d %B %Y | %I:%M %p")

#     # Generate PDF report
#     pdf = FPDF()
#     pdf.set_auto_page_break(auto=True, margin=15)
#     pdf.add_page()

#     pdf.set_font("Arial", "B", 16)
#     pdf.cell(200, 10, "HerbCure - Extracted Ingredients Report", ln=True, align="C")

#     pdf.set_font("Arial", "", 12)
#     pdf.cell(200, 8, f" {date_time}", ln=True, align="C")

#     pdf.ln(10)

#     # ✅ Wrap Extracted Text
#     pdf.set_font("Arial", "", 12)
#     wrapped_text = textwrap.fill(f"Extracted Text:\n{full_text_str}", width=90)
#     pdf.multi_cell(190, 8, wrapped_text)

#     pdf.ln(10)
#     pdf.set_font("Arial", "B", 14)
#     pdf.cell(200, 10, "Detected Ingredients & Their Uses:", ln=True)

#     pdf.set_font("Arial", "", 12)

#     for ingredient in found_ingredients:
#         ingredient_text = f"- {ingredient.capitalize()}: {ingredient_uses[ingredient]}"
#         pdf.multi_cell(190, 8, ingredient_text, align="L")
#         pdf.ln(3)

#     pdf.ln(10)

#     if contains_preservatives:
#         pdf.set_text_color(255, 0, 0)
#         pdf.cell(0, 10, " Warning: This product contains preservatives!", ln=True)
#         pdf.set_font("Arial", "", 11)
#         pdf.multi_cell(
#             190,
#             8,
#             "Note: Some ingredients detected in this product contain preservatives as per "
#             "the guidelines of the Ministry of AYUSH. Please refer to official sources for more details.",
#             align="L",
#         )
#     else:
#         pdf.set_text_color(0, 128, 0)
#         pdf.cell(
#             0,
#             10,
#             "As per the provided image of medicine, no preservatives detected.",
#             ln=True,
#         )
#         pdf.set_font("Arial", "", 11)
#         pdf.multi_cell(
#             190, 8, "Note: Consume after prescription from a doctor.", align="L"
#         )

#     pdf.set_text_color(0, 0, 0)
#     pdf.ln(10)
#     pdf.set_font("Arial", "B", 14)
#     pdf.cell(200, 10, "Alternative Medicine Options:", ln=True)
#     pdf.set_font("Arial", "", 12)

#     for option in alternate_options:
#         pdf.multi_cell(190, 8, f"- {option['name']}: {option['description']}", align="L")
#         pdf.ln(3)

#     pdf.set_font("Arial", "I", 12)
#     pdf.cell(200, 10, "Report Generated by HerbCure", ln=True, align="C")

#     # Save PDF to Downloads folder
#     downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
#     pdf_filename = os.path.join(downloads_path, "Extracted_Ingredients_Report.pdf")
#     pdf.output(pdf_filename, "F")

#     return send_file(pdf_filename, as_attachment=True)

# if __name__ == "__main__":
#     app.run(debug=True, port=5000)

from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import json
import os
import datetime
import textwrap
import base64
from io import BytesIO
from paddleocr import PaddleOCR
from fpdf import FPDF
from PIL import Image

app = Flask(__name__)
CORS(app)

CORS(app, origins=["http://localhost:5173"])

# Load ingredient uses from JSON
with open("data.json", "r", encoding="utf-8") as file:
    ingredient_uses = json.load(file)

# Load alternate medicines from compare.json
with open("compare.json", "r", encoding="utf-8") as file:
    alternate_medicines = json.load(file)

# Initialize PaddleOCR
ocr = PaddleOCR(use_angle_cls=True, lang="en", use_gpu=False)

@app.route("/extract", methods=["POST"])
def extract_text():
    image_path = "uploaded_image.jpg"

    # ✅ Check if an image file was uploaded
    if "image" in request.files:
        image = request.files["image"]
        image.save(image_path)
    
    # ✅ Check if a Base64 image (captured from the camera) is sent
    elif "captured_image" in request.json:
        try:
            captured_image_data = request.json["captured_image"]
            image_data = base64.b64decode(captured_image_data.split(",")[1])  # Extract Base64 data
            image = Image.open(BytesIO(image_data))
            image.save(image_path, "JPEG")  # Save as JPG file
        except Exception as e:
            return jsonify({"error": "Invalid image data"}), 400
    else:
        return jsonify({"error": "No image provided"}), 400

    # Run OCR
    result = ocr.ocr(image_path, cls=True)
    full_text = [word[1][0].strip().lower() for line in result for word in line]
    full_text_str = " ".join(full_text)

    # Stop words filtering
    stop_words = {"dose", "indications", "directions", "usage", "how to use"}
    for stop_word in stop_words:
        if stop_word in full_text_str:
            full_text_str = full_text_str.split(stop_word)[0].strip()
            break

    # Extract ingredients
    common_ingredient_names = set(ingredient_uses.keys())
    found_ingredients = {
        name for name in common_ingredient_names if name in full_text_str
    }

    # Check for preservatives
    preservative_keywords = ["preservative", "excipients", "additive", "stabilizer"]
    contains_preservatives = any(
        keyword in full_text_str for keyword in preservative_keywords
    )

    # Extract disease name from request
    disease_name = request.form.get("disease", "").lower()

    # Find alternate medicine
    alternate_options = [
        med for med in alternate_medicines if med["disease"].lower() == disease_name
    ]

    # Get current date and time
    now = datetime.datetime.now()
    date_time = now.strftime("%A, %d %B %Y | %I:%M %p")

    # Generate PDF report
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()

    # --- HELPER FUNCTION TO SET FONT ---
    def set_font(pdf, size, bold=False):
        pdf.set_font("Arial", "B" if bold else "", size)
    
    # --- HELPER FUNCTION TO PRINT MULTI-CELL TEXT ---
    def print_multicell(pdf, text, width=190, height=8, align="L"):
        pdf.multi_cell(width, height, text, align=align)

    # --- REPORT TITLE ---
    set_font(pdf, 16, bold=True)
    pdf.cell(200, 10, "HerbCure - Extracted Ingredients Report", ln=True, align="C")

    set_font(pdf, 12)
    pdf.cell(200, 8, f"{date_time}", ln=True, align="C")
    pdf.ln(10)

    # --- EXTRACTED TEXT ---
    set_font(pdf, 12)
    wrapped_text = textwrap.fill(f"Extracted Text:\n{full_text_str}", width=180)  # Increased width
    print_multicell(pdf, wrapped_text, width=180)
    pdf.ln(10)

    # --- DETECTED INGREDIENTS ---
    set_font(pdf, 14, bold=True)
    pdf.cell(200, 10, "Detected Ingredients & Their Uses:", ln=True)
    set_font(pdf, 12)

    for ingredient in found_ingredients:
        ingredient_text = f"- {ingredient.capitalize()}: {ingredient_uses[ingredient]}"
        print_multicell(pdf, ingredient_text)
        pdf.ln(3)  # Add space after each ingredient

    pdf.ln(10)

    # --- PRESERVATIVES WARNING ---
    if contains_preservatives:
        pdf.set_text_color(255, 0, 0)  # Red color
        set_font(pdf, 12, bold=True)
        pdf.cell(0, 10, "Warning: This product contains preservatives!", ln=True)
        pdf.set_text_color(0, 0, 0) # Reset to black
        set_font(pdf, 11)
        print_multicell(pdf,
                          "Note: Some ingredients detected in this product contain preservatives as per the guidelines of the Ministry of AYUSH. Please refer to official sources for more details.")
    else:
        pdf.set_text_color(0, 128, 0)  # Green color
        set_font(pdf, 12, bold=True)
        pdf.cell(0, 10, "As per the provided image of medicine, no preservatives detected.", ln=True)
        pdf.set_text_color(0, 0, 0)
        set_font(pdf, 11)
        print_multicell(pdf, "Note: Consume after prescription from a doctor.")

    pdf.set_text_color(0, 0, 0)  # Reset text color to black
    pdf.ln(10)

    # --- ALTERNATIVE MEDICINE OPTIONS ---
    set_font(pdf, 14, bold=True)
    pdf.cell(200, 10, "Alternative Medicine Options:", ln=True)
    set_font(pdf, 12)

    # Display details for the disease entered by the user
    disease_data = next((item for item in alternate_medicines if item["disease"].lower() == disease_name), None)

    if disease_data:
        set_font(pdf, 14, bold=True)
        pdf.cell(200, 10, f"Details for: {disease_data['disease'].capitalize()}", ln=True)
        set_font(pdf, 12)
        print_multicell(pdf, f"Name: {disease_data['name']}")
        print_multicell(pdf, f"Description: {disease_data['description']}", width=180)  # Description has the cut line.
        pdf.ln(5)
    else:
        set_font(pdf, 12)
        pdf.cell(200, 10, "No specific details found for this disease.", ln=True)
        pdf.ln(5)

    for option in alternate_options:
        description = textwrap.fill(option['description'], width=80)  # Wrap each description
        print_multicell(pdf, f"- {option['name']}: {description}", width=180) # Increased width
        pdf.ln(3)

    # --- FOOTER ---
    set_font(pdf, 12, bold=False)
    pdf.cell(200, 10, "Report Generated by HerbCure", ln=True, align="C")

    # Save PDF to Downloads folder
    downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
    pdf_filename = os.path.join(downloads_path, "Extracted_Ingredients_Report.pdf")
    pdf.output(pdf_filename, "F")

    return send_file(pdf_filename, as_attachment=True)

if __name__ == "__main__":
    app.run(debug=True, port=5000)
